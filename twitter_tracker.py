#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import requests
import certifi
import ssl
ssl._create_default_https_context = ssl._create_unverified_context


# 1) D√©sactiver les avertissements de type InsecureRequestWarning
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# 2) Forcer Python √† utiliser le bundle de certificats de certifi
os.environ['SSL_CERT_FILE'] = certifi.where()

# Optionnel : si vraiment n√©cessaire (d√©sactive enti√®rement la v√©rification)
# ssl._create_default_https_context = ssl._create_unverified_context

# Apr√®s avoir configur√© le SSL, on peut importer snscrape
import snscrape.modules.twitter as sntwitter
from textblob import TextBlob
import ccxt

"""
Ce module propose des fonctions pour r√©cup√©rer et analyser
les tweets relatifs aux cryptomonnaies via snscrape.
"""

# --------------------------------------------------------
# Fonction pour r√©cup√©rer les 100 cryptos les plus actives de Binance
# --------------------------------------------------------
def get_binance_top_100():
    """
    R√©cup√®re les 100 cryptos les plus actives sur Binance avec la paire de trading USDT.
    """
    binance = ccxt.binance()
    markets = binance.load_markets()
    symbols = list(markets.keys())
    # On r√©cup√®re seulement les cryptos ayant la paire USDT
    spot_symbols = [s.split('/')[0] for s in symbols if '/USDT' in s]
    return list(set(spot_symbols))[:100]

# --------------------------------------------------------
# Fonction pour r√©cup√©rer les tweets associ√©s √† une crypto-monnaie
# --------------------------------------------------------
def get_tweets_for_coin(coin, limit=50):
    """
    R√©cup√®re les tweets associ√©s √† un coin sp√©cifique (crypto-monnaie).
    
    :param coin: Le nom de la crypto √† rechercher sur Twitter (ex. "BTC").
    :param limit: Le nombre maximum de tweets √† r√©cup√©rer.
    :return: Liste de contenu textuel des tweets r√©cup√©r√©s.
    """
    # Tu peux ajuster la requ√™te en fonction de tes besoins (langue, date, etc.)
    query = f"{coin} crypto lang:en since:2024-01-01"
    tweets_collected = []
    
    # Parcours des tweets renvoy√©s par snscrape
    for i, tweet in enumerate(sntwitter.TwitterSearchScraper(query).get_items()):
        if i >= limit:
            break
        tweets_collected.append(tweet.content)
    
    return tweets_collected

# --------------------------------------------------------
# Fonction pour analyser le sentiment d'une liste de tweets
# --------------------------------------------------------
def analyze_sentiment(tweets):
    """
    Analyse le sentiment des tweets r√©cup√©r√©s en utilisant TextBlob.
    
    :param tweets: Liste de tweets √† analyser (cha√Ænes de caract√®res).
    :return: Score de sentiment moyen (entre -1 et 1).
    """
    sentiments = [TextBlob(t).sentiment.polarity for t in tweets]
    return round(sum(sentiments) / len(sentiments), 3) if sentiments else 0

# --------------------------------------------------------
# Fonction pour analyser le sentiment global des cryptos sur Twitter
# --------------------------------------------------------
def analyze_crypto_sentiment_twitter(coins, limit=50):
    """
    Analyse le sentiment Twitter pour la liste de cryptos `coins`.
    
    :param coins: Liste des cryptos √† analyser (ex. ["BTC", "ETH", "BNB", ...]).
    :param limit: Nombre maximum de tweets √† r√©cup√©rer par crypto.
    :return: Un dictionnaire { 'BTC': score, 'ETH': score, ... } avec le score de sentiment.
    """
    results = {}

    for coin in coins:
        print(f"üîç Analyse de {coin}...")
        tweets = get_tweets_for_coin(coin, limit=limit)
        sentiment_score = analyze_sentiment(tweets)
        results[coin] = sentiment_score

    return results

# --------------------------------------------------------
# Fonction principale (exemple d'utilisation)
# --------------------------------------------------------
if __name__ == "__main__":
    print("üîÅ D√©but de l'analyse des sentiments Twitter pour les cryptos...")

    # Exemple : r√©cup√©rer la liste des 100 cryptos de Binance
    coins_list = get_binance_top_100()

    # Analyser le sentiment pour ces cryptos
    scores = analyze_crypto_sentiment_twitter(coins_list)

    # Afficher les scores, tri√©s par ordre d√©croissant
    print("\nüìä R√©sultats du sentiment Twitter :")
    for coin, score in sorted(scores.items(), key=lambda x: x[1], reverse=True):
        print(f"{coin}: {score}")
